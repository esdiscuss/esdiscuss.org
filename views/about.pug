extends layout

block title
  title ES Discuss - About

block navsections
  li
    a(href='/1') Topics
  li
    a(href='/notes') Notes
  li.active
    a(href='/about') About


block content
  .row
    .col-md-12
      .notes
        h1 About
        p.
          Since this is a website about JavaScript, and it's built in Node.js, I thought people might be interested in how it all works.  It's a really nice interesting example of a medium scale Node.js app.  It makes use of both streams and promises in important ways.

        h2 Architecture
        :markdown-it
          This website consists of two Node.js servers and a MongoDB database.  The **bot** is available at [http://pipermail-bot.jit.su](http://pipermail-bot.jit.su) if you want to see the current status, and you can view statistics in the graphs on this page.  The **website** is available at [http://esdiscuss.org](http://esdiscuss.org) and you're looking at it right now.

        :markdown-it
          The bot consists of two key modules

           - The [pipermail](https://github.com/esdiscuss/pipermail) module is responsible for downloading and parsing the esdiscuss archives.  It outputs a stream of JSON objects, each of which contain the parsed header and the body of an e-mail.

           - The [bot](https://github.com/esdiscuss/bot) reads the parsed output of the pipermail bot and stores it in MongoDB.

        h2 Bot Statistics - Runs Per Day
        #allcount.svg
        table#allcounttable.table
          thead
            tr
              th Day
              th Count
          tbody
            each run in allTime
              tr
                td= run._id
                td= run.runs
block scripts
  script(src='//cdnjs.cloudflare.com/ajax/libs/raphael/2.1.0/raphael-min.js')
  script(src='//cdnjs.cloudflare.com/ajax/libs/graphael/0.5.1/g.raphael-min.js')
  script(src='//cdnjs.cloudflare.com/ajax/libs/graphael/0.5.1/g.line-min.js')
  script.
    ;(function () {
      function hide(id) {
        document.getElementById(id).style.display = 'none';
      }
      var width = 1000;
      var height = 500;
      var all = JSON.parse('!{JSON.stringify(allTime)}').reverse();
      renderAggregate('allcount', all, 'runs', 1);
      function renderDay(name, day) {
        var paper = Raphael(name, width, height);
        var dates = day.map(function (d) {
          d = new Date(d.start);
          return d.getUTCHours() + d.getUTCMinutes() / 60 + d.getUTCSeconds() / (60 * 60);
        });
        var durations = day.map(function (d) {
          return d.duration / (60 * 1000)
        });
        paper.linechart(40, 10, width - 80, height - 20, dates, durations, {
          symbol: '',
          width: 0.5,
          smooth: true,
          axis: '0 0 1 1'
        });
        hide(name + 'table')
      }
      function renderAggregate(name, data, key, factor) {
        var paper = Raphael(name, width, height);
        var dates = data.map(function (d) {
          d = d._id.split('-');
          return (+d[0]) * 365 + (+d[1]) * 30 + (+d[2]);
        });
        var durations = data.map(function (d) {
          return d[key] / factor
        });
        paper.linechart(40, 10, width - 80, height - 20, dates, durations, {
          symbol: 'circle',
          width: 0.5,
          smooth: true,
          axis: '0 0 1 1'
        });
        hide(name + 'table')
      }
    }());
